// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                    String   @id @default(cuid())
  slug                  String   @unique
  name                  String
  description           String?
  shortDesc             String?
  startDate             DateTime
  endDate               DateTime
  registrationDeadline  DateTime?
  status                String   @default("DRAFT")
  featured              Boolean  @default(false)
  capacity              Int?
  venueId               String?
  venue                 Venue?   @relation(fields: [venueId], references: [id])
  website               String?
  registrationUrl       String?
  imageUrl              String?
  createdById           String?
  sourceUrl             String?
  scrapedAt             DateTime?
  verified              Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  teachers              EventTeacher[]
  musicians             EventMusician[]
  prices                EventPrice[]
  tags                  EventTag[]

  @@map("events")
}

model Venue {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  latitude        Float?
  longitude       Float?
  website         String?
  phone           String?
  email           String?
  capacity        Int?
  description     String?
  hasParking      Boolean  @default(false)
  hasAirCon       Boolean  @default(false)
  hasWifi         Boolean  @default(false)
  wheelchairAccess Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  events          Event[]

  @@map("venues")
}

model Teacher {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  bio             String?
  avatar          String?
  verified        Boolean  @default(false)
  yearsActive     Int?
  website         String?
  email           String?
  specializations String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  events          EventTeacher[]
  specialties     TeacherSpecialty[]

  @@map("teachers")
}

model Musician {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  bio           String?
  avatar        String?
  verified      Boolean  @default(false)
  instruments   String[]
  yearsActive   Int?
  website       String?
  email         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  events        EventMusician[]
  genres        MusicianGenre[]

  @@map("musicians")
}

// Junction tables
model EventTeacher {
  id          String  @id @default(cuid())
  eventId     String
  teacherId   String
  role        String?
  workshops   String[]
  level       String?

  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  teacher     Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([eventId, teacherId])
  @@map("event_teachers")
}

model EventMusician {
  id          String   @id @default(cuid())
  eventId     String
  musicianId  String
  role        String?
  setTimes    String[]

  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  musician    Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade)

  @@unique([eventId, musicianId])
  @@map("event_musicians")
}

model EventPrice {
  id          String   @id @default(cuid())
  eventId     String
  type        String
  amount      Float
  currency    String
  deadline    DateTime?
  description String?
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_prices")
}

model EventTag {
  id        String   @id @default(cuid())
  eventId   String
  tag       String
  createdAt DateTime @default(now())

  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, tag])
  @@map("event_tags")
}

model TeacherSpecialty {
  id         String   @id @default(cuid())
  teacherId  String
  specialty  String
  createdAt  DateTime @default(now())

  teacher    Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, specialty])
  @@map("teacher_specialties")
}

model MusicianGenre {
  id         String   @id @default(cuid())
  musicianId String
  genre      String
  createdAt  DateTime @default(now())

  musician   Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade)

  @@unique([musicianId, genre])
  @@map("musician_genres")
}

// Rate limiting table
model RateLimit {
  id          String   @id @default(cuid())
  clientId    String   // IP address or user ID
  endpoint    String   // API endpoint or action type
  count       Int      // Request count in current window
  windowStart DateTime // Start of current window
  windowEnd   DateTime // End of current window
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([clientId, endpoint])
  @@map("rate_limits")
}

// Audit logging table
model AuditLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  userId       String?  // User who performed the action
  action       String   // Type of action performed
  entityType   String   // Type of entity affected
  entityId     String?  // ID of entity affected
  oldValues    Json?    // Previous values before change
  newValues    Json?    // New values after change
  metadata     Json?    // Additional metadata
  ipAddress    String?  // IP address of requester
  userAgent    String?  // User agent of requester
  source       String   // Source system/component
  createdAt    DateTime @default(now())

  @@index([timestamp])
  @@index([action])
  @@index([entityType, entityId])
  @@index([userId])
  @@map("audit_logs")
}
